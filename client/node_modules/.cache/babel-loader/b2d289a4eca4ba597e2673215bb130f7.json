{"ast":null,"code":"var _jsxFileName = \"/Users/johnmcleodbrown/Desktop/RTCConnectedTutor/client/src/routes/Room.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = props => {\n  const userVideo = useRef();\n  const guestVideo = useRef();\n  const peerRef = useRef();\n  const socketRef = useRef();\n  const otherUser = useRef();\n  const userStream = useRef();\n  useEffect(() => {\n    //gets media streams and sets them to stream\n    //initialises socket.io connection, allows users to join room through this connection\n    navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      userStream.current = stream;\n      socketRef.current = io.connect(\"/\");\n      socketRef.current.emit(\"join room\", props.match.params.roomID);\n      socketRef.current.on('other user', userID => {\n        callUser(userID);\n        otherUser.current = userID;\n      });\n      socketRef.current.on(\"user joined\", userID => {\n        otherUser.current = userID;\n      });\n      socketRef.current.on(\"offer\", recieveCall);\n      socketRef.current.on(\"answer\", answerCall);\n      socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n    });\n  }, []); //function that takes in a userID (not linked to ConnectedTutor API) and\n  //adds it to a Peer object, then adds each media stream (track) to the current users\n  //userStream\n\n  function callUser(userID) {\n    peerRef.current = createPeer(userID);\n    userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n  } //creates RTCPeerConnection using pre made ICE Servers - TURN and STUN\n  //Premium service if creating own servers\n  //Cope with connection between 2 users\n\n\n  function createPeer(userID) {\n    const peer = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.stunprotocol.org\"\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    peer.onicecandidate = handleICECandidateEvent;\n    peer.ontrack = handleTrackEvent;\n\n    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n    return peer;\n  }\n\n  function handleNegotiationNeededEvent(userID) {\n    peerRef.current.createOffer().then(offer => {\n      return peerRef.current.setLocalDescription(offer);\n    }).then(() => {\n      const payload = {\n        target: userID,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"offer\", payload);\n    }).catch(e => console.log(e));\n  } //function that handles incoming call from second user\n\n\n  function recieveCall(incoming) {\n    peerRef.current = createPeer();\n    const desc = new RTCSessionDescription(incoming.sdp);\n    peerRef.current.setRemoteDescription(desc).then(() => {\n      userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }).then(() => {\n      return peerRef.current.createAnswer();\n    }).then(answer => {\n      return peerRef.current.setLocalDescription(answer);\n    }).then(() => {\n      const payload = {\n        target: incoming.caller,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"answer\", payload);\n    });\n  } //function that answers call from second user\n\n\n  function answerCall(message) {\n    const desc = new RTCSessionDescription(message.sdp);\n    peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n  } //3 functions to handle ICE events\n\n\n  function handleICECandidateEvent(e) {\n    if (e.candidate) {\n      const payload = {\n        target: otherUser.current,\n        candidate: e.candidate\n      };\n      socketRef.current.emit(\"ice-candidate\", payload);\n    }\n  }\n\n  function handleNewICECandidateMsg(incoming) {\n    const candidate = new RTCIceCandidate(incoming);\n    peerRef.current.addIceCandidate(candidate).catch(e => console.log(e));\n  }\n\n  function handleTrackEvent(e) {\n    guestVideo.current.srcObject = e.streams[0];\n  }\n\n  ; //returns A/V streams of users in room\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    ref: guestVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Room;","map":{"version":3,"sources":["/Users/johnmcleodbrown/Desktop/RTCConnectedTutor/client/src/routes/Room.js"],"names":["React","useRef","useEffect","io","Room","props","userVideo","guestVideo","peerRef","socketRef","otherUser","userStream","navigator","mediaDevices","getUserMedia","audio","video","then","stream","current","srcObject","connect","emit","match","params","roomID","on","userID","callUser","recieveCall","answerCall","handleNewICECandidateMsg","createPeer","getTracks","forEach","track","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","payload","target","caller","id","sdp","localDescription","catch","e","console","log","incoming","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","message","candidate","RTCIceCandidate","addIceCandidate","streams"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = (props) => {\n    const userVideo = useRef();\n    const guestVideo = useRef();\n    const peerRef = useRef();\n    const socketRef = useRef();\n    const otherUser = useRef();\n    const userStream = useRef();\n\n    useEffect(() => {\n        //gets media streams and sets them to stream\n        //initialises socket.io connection, allows users to join room through this connection\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n            userStream.current = stream;\n\n            socketRef.current = io.connect(\"/\");\n            socketRef.current.emit(\"join room\", props.match.params.roomID);\n\n            socketRef.current.on('other user', userID => {\n                callUser(userID);\n                otherUser.current = userID;\n            });\n\n            socketRef.current.on(\"user joined\", userID => {\n                otherUser.current = userID;\n            });\n\n            socketRef.current.on(\"offer\", recieveCall);\n\n            socketRef.current.on(\"answer\", answerCall);\n\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n        });\n\n    }, []);\n\n    //function that takes in a userID (not linked to ConnectedTutor API) and\n    //adds it to a Peer object, then adds each media stream (track) to the current users\n    //userStream\n    function callUser(userID) {\n        peerRef.current = createPeer(userID);\n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }\n\n    //creates RTCPeerConnection using pre made ICE Servers - TURN and STUN\n    //Premium service if creating own servers\n    //Cope with connection between 2 users\n    function createPeer(userID) {\n        const peer = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: \"stun:stun.stunprotocol.org\"\n                },\n                {\n                    urls: 'turn:numb.viagenie.ca',\n                    credential: 'muazkh',\n                    username: 'webrtc@live.com'\n                },\n            ]\n        });\n\n        peer.onicecandidate = handleICECandidateEvent;\n        peer.ontrack = handleTrackEvent;\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n        return peer;\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n        peerRef.current.createOffer().then(offer => {\n            return peerRef.current.setLocalDescription(offer);\n        }).then(() => {\n            const payload = {\n                target: userID,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            };\n            socketRef.current.emit(\"offer\", payload);\n        }).catch(e => console.log(e));\n    }\n\n    //function that handles incoming call from second user\n    function recieveCall(incoming) {\n        peerRef.current = createPeer();\n        const desc = new RTCSessionDescription(incoming.sdp);\n        peerRef.current.setRemoteDescription(desc).then(() => {\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        }).then(() => {\n            return peerRef.current.createAnswer();\n        }).then(answer => {\n            return peerRef.current.setLocalDescription(answer);\n        }).then(() => {\n            const payload = {\n                target: incoming.caller,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            }\n            socketRef.current.emit(\"answer\", payload);\n        })\n    }\n\n    //function that answers call from second user\n    function answerCall(message) {\n        const desc = new RTCSessionDescription(message.sdp);\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    }\n\n    //3 functions to handle ICE events\n    function handleICECandidateEvent(e) {\n        if (e.candidate) {\n            const payload = {\n                target: otherUser.current,\n                candidate: e.candidate,\n            }\n            socketRef.current.emit(\"ice-candidate\", payload);\n        }\n    }\n\n    function handleNewICECandidateMsg(incoming) {\n        const candidate = new RTCIceCandidate(incoming);\n\n        peerRef.current.addIceCandidate(candidate)\n            .catch(e => console.log(e));\n    }\n\n    function handleTrackEvent(e) {\n        guestVideo.current.srcObject = e.streams[0];\n    };\n\n    //returns A/V streams of users in room\n    return (\n        <div>\n            <video autoPlay ref={userVideo} />\n            <video autoPlay ref={guestVideo} />\n        </div>\n    );\n};\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}