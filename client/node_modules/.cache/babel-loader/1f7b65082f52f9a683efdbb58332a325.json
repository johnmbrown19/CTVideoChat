{"ast":null,"code":"import React,{useRef,useEffect}from\"react\";import io from\"socket.io-client\";var Room=function Room(props){var userVideo=useRef();var guestVideo=useRef();var peerRef=useRef();var socketRef=useRef();var otherUser=useRef();var userStream=useRef();useEffect(function(){//gets media streams and sets them to stream\n//initialises socket.io connection, allows users to join room through this connection\nnavigator.mediaDevices.getUserMedia({audio:true,video:true}).then(function(stream){userVideo.current.srcObject=stream;userStream.current=stream;socketRef.current=io.connect(\"/\");socketRef.current.emit(\"join room\",props.match.params.roomID);socketRef.current.on('other user',function(userID){callUser(userID);otherUser.current=userID;});socketRef.current.on(\"user joined\",function(userID){otherUser.current=userID;});socketRef.current.on(\"offer\",recieveCall);socketRef.current.on(\"answer\",answerCall);socketRef.current.on(\"ice-candidate\",handleNewICECandidateMsg);});},[]);//function that takes in a userID (not linked to ConnectedTutor API) and\n//adds it to a Peer object, then adds each media stream (track) to the current users\n//userStream\nfunction callUser(userID){peerRef.current=createPeer(userID);userStream.current.getTracks().forEach(function(track){return peerRef.current.addTrack(track,userStream.current);});}//creates RTCPeerConnection using pre made ICE Servers - TURN and STUN\n//Premium service if creating own servers\n//Cope with connection between 2 users\nfunction createPeer(userID){var peer=new RTCPeerConnection({iceServers:[{urls:\"stun:stun.stunprotocol.org\"},{urls:'turn:numb.viagenie.ca',credential:'muazkh',username:'webrtc@live.com'}]});peer.onicecandidate=handleICECandidateEvent;peer.ontrack=handleTrackEvent;peer.onnegotiationneeded=function(){return handleNegotiationNeededEvent(userID);};return peer;}function handleNegotiationNeededEvent(userID){peerRef.current.createOffer().then(function(offer){return peerRef.current.setLocalDescription(offer);}).then(function(){var payload={target:userID,caller:socketRef.current.id,sdp:peerRef.current.localDescription};socketRef.current.emit(\"offer\",payload);}).catch(function(e){return console.log(e);});}//function that handles incoming call from second user\nfunction recieveCall(incoming){peerRef.current=createPeer();var desc=new RTCSessionDescription(incoming.sdp);peerRef.current.setRemoteDescription(desc).then(function(){userStream.current.getTracks().forEach(function(track){return peerRef.current.addTrack(track,userStream.current);});}).then(function(){return peerRef.current.createAnswer();}).then(function(answer){return peerRef.current.setLocalDescription(answer);}).then(function(){var payload={target:incoming.caller,caller:socketRef.current.id,sdp:peerRef.current.localDescription};socketRef.current.emit(\"answer\",payload);});}//function that answers call from second user\nfunction answerCall(message){var desc=new RTCSessionDescription(message.sdp);peerRef.current.setRemoteDescription(desc).catch(function(e){return console.log(e);});}//3 functions to handle ICE events\nfunction handleICECandidateEvent(e){if(e.candidate){var payload={target:otherUser.current,candidate:e.candidate};socketRef.current.emit(\"ice-candidate\",payload);}}function handleNewICECandidateMsg(incoming){var candidate=new RTCIceCandidate(incoming);peerRef.current.addIceCandidate(candidate).catch(function(e){return console.log(e);});}function handleTrackEvent(e){guestVideo.current.srcObject=e.streams[0];};//returns A/V streams of users in room\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"video\",{autoPlay:true,ref:userVideo}),/*#__PURE__*/React.createElement(\"video\",{autoPlay:true,ref:guestVideo}));};export default Room;","map":{"version":3,"sources":["/Users/johnmcleodbrown/Desktop/RTCConnectedTutor/client/src/routes/Room.js"],"names":["React","useRef","useEffect","io","Room","props","userVideo","guestVideo","peerRef","socketRef","otherUser","userStream","navigator","mediaDevices","getUserMedia","audio","video","then","stream","current","srcObject","connect","emit","match","params","roomID","on","userID","callUser","recieveCall","answerCall","handleNewICECandidateMsg","createPeer","getTracks","forEach","track","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","payload","target","caller","id","sdp","localDescription","catch","e","console","log","incoming","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","message","candidate","RTCIceCandidate","addIceCandidate","streams"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = (props) => {\n    const userVideo = useRef();\n    const guestVideo = useRef();\n    const peerRef = useRef();\n    const socketRef = useRef();\n    const otherUser = useRef();\n    const userStream = useRef();\n\n    useEffect(() => {\n        //gets media streams and sets them to stream\n        //initialises socket.io connection, allows users to join room through this connection\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n            userStream.current = stream;\n\n            socketRef.current = io.connect(\"/\");\n            socketRef.current.emit(\"join room\", props.match.params.roomID);\n\n            socketRef.current.on('other user', userID => {\n                callUser(userID);\n                otherUser.current = userID;\n            });\n\n            socketRef.current.on(\"user joined\", userID => {\n                otherUser.current = userID;\n            });\n\n            socketRef.current.on(\"offer\", recieveCall);\n\n            socketRef.current.on(\"answer\", answerCall);\n\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n        });\n\n    }, []);\n\n    //function that takes in a userID (not linked to ConnectedTutor API) and\n    //adds it to a Peer object, then adds each media stream (track) to the current users\n    //userStream\n    function callUser(userID) {\n        peerRef.current = createPeer(userID);\n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }\n\n    //creates RTCPeerConnection using pre made ICE Servers - TURN and STUN\n    //Premium service if creating own servers\n    //Cope with connection between 2 users\n    function createPeer(userID) {\n        const peer = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: \"stun:stun.stunprotocol.org\"\n                },\n                {\n                    urls: 'turn:numb.viagenie.ca',\n                    credential: 'muazkh',\n                    username: 'webrtc@live.com'\n                },\n            ]\n        });\n\n        peer.onicecandidate = handleICECandidateEvent;\n        peer.ontrack = handleTrackEvent;\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n        return peer;\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n        peerRef.current.createOffer().then(offer => {\n            return peerRef.current.setLocalDescription(offer);\n        }).then(() => {\n            const payload = {\n                target: userID,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            };\n            socketRef.current.emit(\"offer\", payload);\n        }).catch(e => console.log(e));\n    }\n\n    //function that handles incoming call from second user\n    function recieveCall(incoming) {\n        peerRef.current = createPeer();\n        const desc = new RTCSessionDescription(incoming.sdp);\n        peerRef.current.setRemoteDescription(desc).then(() => {\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        }).then(() => {\n            return peerRef.current.createAnswer();\n        }).then(answer => {\n            return peerRef.current.setLocalDescription(answer);\n        }).then(() => {\n            const payload = {\n                target: incoming.caller,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            }\n            socketRef.current.emit(\"answer\", payload);\n        })\n    }\n\n    //function that answers call from second user\n    function answerCall(message) {\n        const desc = new RTCSessionDescription(message.sdp);\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    }\n\n    //3 functions to handle ICE events\n    function handleICECandidateEvent(e) {\n        if (e.candidate) {\n            const payload = {\n                target: otherUser.current,\n                candidate: e.candidate,\n            }\n            socketRef.current.emit(\"ice-candidate\", payload);\n        }\n    }\n\n    function handleNewICECandidateMsg(incoming) {\n        const candidate = new RTCIceCandidate(incoming);\n\n        peerRef.current.addIceCandidate(candidate)\n            .catch(e => console.log(e));\n    }\n\n    function handleTrackEvent(e) {\n        guestVideo.current.srcObject = e.streams[0];\n    };\n\n    //returns A/V streams of users in room\n    return (\n        <div>\n            <video autoPlay ref={userVideo} />\n            <video autoPlay ref={guestVideo} />\n        </div>\n    );\n};\n\nexport default Room;"]},"metadata":{},"sourceType":"module"}