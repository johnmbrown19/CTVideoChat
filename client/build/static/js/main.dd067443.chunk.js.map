{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","Room","userVideo","useRef","guestVideo","peerRef","socketRef","otherUser","userStream","createPeer","userID","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","current","createOffer","then","offer","setLocalDescription","payload","target","caller","sdp","localDescription","emit","catch","e","console","log","handleNegotiationNeededEvent","recieveCall","incoming","desc","RTCSessionDescription","setRemoteDescription","getTracks","forEach","track","addTrack","createAnswer","answer","answerCall","message","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","srcObject","streams","useEffect","navigator","mediaDevices","getUserMedia","audio","video","stream","io","connect","match","params","roomID","on","callUser","autoPlay","ref","App","className","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.dd067443.chunk.js","sourcesContent":["import React from \"react\";\nimport { v1 as uuid } from \"uuid\";\n\nconst CreateRoom = (props) => {\n    //function which creates a unique URL via UUID and sets the URL to this\n    function create() {\n        const id = uuid();\n        props.history.push(`/room/${id}`);\n    }\n\n    //returns a simple button that when clicked takes user\n    //to Room.js where their A/V streams are shown\n    return (\n        <button onClick={create}>Create Room</button>\n    );\n}\n\nexport default CreateRoom;","import React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = (props) => {\n    const userVideo = useRef();\n    const guestVideo = useRef();\n    const peerRef = useRef();\n    const socketRef = useRef();\n    const otherUser = useRef();\n    const userStream = useRef();\n\n    useEffect(() => {\n        //gets media streams and sets them to stream\n        //initialises socket.io connection, allows users to join room through this connection\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n            userStream.current = stream;\n\n            socketRef.current = io.connect(\"/\");\n            socketRef.current.emit(\"join room\", props.match.params.roomID);\n\n            socketRef.current.on('other user', userID => {\n                callUser(userID);\n                otherUser.current = userID;\n            });\n\n            socketRef.current.on(\"user joined\", userID => {\n                otherUser.current = userID;\n            });\n\n            socketRef.current.on(\"offer\", recieveCall);\n\n            socketRef.current.on(\"answer\", answerCall);\n\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n        });\n\n    }, []);\n\n    //function that takes in a userID (not linked to ConnectedTutor API) and\n    //adds it to a Peer object, then adds each media stream (track) to the current users\n    //userStream\n    function callUser(userID) {\n        peerRef.current = createPeer(userID);\n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }\n\n    //creates RTCPeerConnection using pre made ICE Servers - TURN and STUN\n    //Premium service if creating own servers\n    //Cope with connection between 2 users\n    function createPeer(userID) {\n        const peer = new RTCPeerConnection({\n            iceServers: [\n                {\n                    urls: \"stun:stun.stunprotocol.org\"\n                },\n                {\n                    urls: 'turn:numb.viagenie.ca',\n                    credential: 'muazkh',\n                    username: 'webrtc@live.com'\n                },\n            ]\n        });\n\n        peer.onicecandidate = handleICECandidateEvent;\n        peer.ontrack = handleTrackEvent;\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n        return peer;\n    }\n\n    function handleNegotiationNeededEvent(userID) {\n        peerRef.current.createOffer().then(offer => {\n            return peerRef.current.setLocalDescription(offer);\n        }).then(() => {\n            const payload = {\n                target: userID,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            };\n            socketRef.current.emit(\"offer\", payload);\n        }).catch(e => console.log(e));\n    }\n\n    //function that handles incoming call from second user\n    function recieveCall(incoming) {\n        peerRef.current = createPeer();\n        const desc = new RTCSessionDescription(incoming.sdp);\n        peerRef.current.setRemoteDescription(desc).then(() => {\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n        }).then(() => {\n            return peerRef.current.createAnswer();\n        }).then(answer => {\n            return peerRef.current.setLocalDescription(answer);\n        }).then(() => {\n            const payload = {\n                target: incoming.caller,\n                caller: socketRef.current.id,\n                sdp: peerRef.current.localDescription\n            }\n            socketRef.current.emit(\"answer\", payload);\n        })\n    }\n\n    //function that answers call from second user\n    function answerCall(message) {\n        const desc = new RTCSessionDescription(message.sdp);\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    }\n\n    //3 functions to handle ICE events\n    function handleICECandidateEvent(e) {\n        if (e.candidate) {\n            const payload = {\n                target: otherUser.current,\n                candidate: e.candidate,\n            }\n            socketRef.current.emit(\"ice-candidate\", payload);\n        }\n    }\n\n    function handleNewICECandidateMsg(incoming) {\n        const candidate = new RTCIceCandidate(incoming);\n\n        peerRef.current.addIceCandidate(candidate)\n            .catch(e => console.log(e));\n    }\n\n    function handleTrackEvent(e) {\n        guestVideo.current.srcObject = e.streams[0];\n    };\n\n    //returns A/V streams of users in room\n    return (\n        <div>\n            <video autoPlay ref={userVideo} />\n            <video autoPlay ref={guestVideo} />\n        </div>\n    );\n};\n\nexport default Room;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./routes/CreateRoom\";\nimport Room from \"./routes/Room\";\nimport './App.css';\n\n//Routes for both paths of application\n//CreateRoom (\"/\") has button that takes user to Room (\"/room\")\n//URL is unique and is what is shared to allow other user to join\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact component={CreateRoom} />\n          <Route path=\"/room/:roomID\" component={Room} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}